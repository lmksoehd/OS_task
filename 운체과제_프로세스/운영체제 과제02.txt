운영체제 과제
< 기본 구조 >
스케줄링 함수가 한 번 호출될 때마다 1초가 지났다고 가정
- 현실 시간 아님

각 프로세스는 실제 thread로 구현
- thread가 실행할 함수도 직접 작성, thread sleep , 실행되는 순서 등은 조건변수, 세마포어등  thread 라이브러리 사용

프로세스를 2종류로 관리
-Foreground process
- Background process: 사용자와 관계 없이 동작

프로그램 시작할 때 프로세스 2개 생성
- shell: CLI를 제공하는 FG 프로세스: 몇 가지 간단한 명령어 처리, 이 과제에서는 파일 입력으로 대체( 일정한 시간마다 사용자가 입력한다고 가정)
monitor: 시스템 상태를 보여주는 BG 프로세스: 일정시간마다 DYnamic Queue와 wati queue(블록된 프로세스 ) 상태 출력


< 해야 할 일 >
1. 스케줄링 함수 구현: 스케줄링 함수 호출할 때마다 1초-> 가상 시간 사용
2. 프로세스 실제 구현: 각 프로세스는 실제 스레드로 구현, 스레드가 실행할 함수 직접 작성, 스레드 슬맆, 실행 순서 등을 조건변수랑 세마포어 등 라이브러리 사용해서 관리
3 프로세스 관리: 프로세스를 FG랑BG로 나눠서 관리, FG는 사용자와 상호작용, BG는 사용자와 관계없이 동작하는 프로세스
4. 초기 프로세스 생성: 프로그램 시작 시 두 개의 프로세스 생성 해야함. shell monitor


-=-------------------------예제1 join
#include <iostream>
#include<thread>
#include<windows.h>

using namespace std;

void worker();

void worker() {
	for (int i = 0; i < 10; ++i) {
		Sleep(1000);
		cout << i << endl;
	}
}

int main() {
	thread t1(worker);
	t1.join();
	printf("==end of main() == \n");
	return 0;
}

:과제에서 요구하는 '각 프로세스는 실제 thread로 구현'하는 부분에 해당
이 코드는 C++를 사용하여 단일 스레드를 생성하고 실행하는 간단한 예제입니다. 과제의 맥락에서 본다면, 이 코드는 일종의 시작점으로 볼 수 있으며, 여러분은 여기에 더해 여러 프로세스(스레드)를 관리하고 스케줄링하는 로직을 추가해야 할 것입니다.

t1.join();: 메인 스레드는 t1 스레드가 종료될 때까지 대기합니다. 이는 worker 함수의 실행이 완료될 때까지 메인 스레드가 종료되지 않도록 보장합니다.
------------------------------------------------------example detatach()
#include <iostream>
#include<thread>
#include<windows.h>

using namespace std;

void worker();

void worker() {
	for (int i = 0; i < 10; ++i) {
		Sleep(1000);
		cout << i << endl;
	}
}

int main() {
	thread t1(worker);
	t1.detach(); 
	printf("==end of main() == \n");
	Sleep(5000);
	return 0;

}


:"실제 thread로 프로세스 구현" 부분과 관련이 있습니다. 하지만, 주요 변경 사항은 t1.join(); 대신에 t1.detach();를 사용한 부분

t1.detach();의 사용:

detach() 함수는 thread를 'detached' 상태로 만들어, 해당 thread가 별도로 실행될 수 있도록 합니다. 즉, 메인 thread가 해당 thread의 종료를 기다리지 않고 바로 다음 코드로 넘어갑니다.
Detached 상태의 thread는 실행이 완료되면 자동으로 리소스가 해제됩니다. 메인 thread나 다른 thread가 이 thread의 종료를 기다리지 않습니다.

코드의 실행 결과 및 동작 방식의 차이:

위 코드에서는 t1.detach();를 호출한 후, 메인 thread는 Sleep(5000);으로 5초간 대기하고 프로그램이 종료됩니다. 이는 메인 thread가 worker thread의 종료를 기다리지 않고 바로 다음 명령어로 넘어가기 때문입니다.
만약 worker thread가 5초 이내에 실행을 완료하지 못하면, 메인 thread가 return 0;을 실행하며 프로그램이 종료될 수 있습니다. 그러나 이 코드의 경우, worker thread는 10초 동안 실행되도록 설계되었기 때문에, 메인 thread의 5초 대기 후에도 여전히 실행 중이며, 메인 thread가 종료된 후에도 나머지 실행을 계속합니다


결론적으로, 이 코드는 detached thread의 사용을 보여주며, 이는 thread가 독립적으로 실행되도록 하여 메인 프로그램의 실행 흐름을 방해하지 않게 합니다. 이는 백그라운드에서 동작해야 하는 프로세스나 작업을 구현할 때 유용할 수 있습니다. 하지만, 메인 프로그램이 모든 thread의 실행이 완료되기 전에 종료될 수 있으므로 리소스 관리 및 프로그램의 정상 종료를 위한 추가적인 고려가 필요

---------------------------자식 스레드x2
#include <iostream>
#include<thread>
#include<windows.h>
#include<mutex>

using namespace std;
mutex mtx;

void worker(int, int);

void worker(int id, int delay_ms) {
	for (int i = 0; i < 10; ++i) {
		Sleep(delay_ms);
		mtx.lock();
		cout << "thread#" << id << ": " << i << endl;
		mtx.unlock();
	}
}

int main() {
	thread t1(worker, 1, 1000);
	thread t2(worker, 2, 300);
	t1.join();
	t2.join();
	printf("===end of main()===");
}


이 코드는 멀티스레딩 환경에서의 **스레드 동기화 및 상호 배제(mutex)**를 사용하여 공유 자원(여기서는 표준 출력)에 대한 접근을 안전하게 관리하는 방법을 보여주는 것과 관련이 있습니다. 따라서, 이 코드는 다음과 같은 과제의 부분에 해당될 수 있습니다:

멀티스레딩 프로그래밍: 멀티스레드를 생성하고 관리하는 방법을 배우는 과제에서 해당 코드는 여러 스레드의 생성과 종료를 다루는 방법을 보여줍니다.

동기화 메커니즘: 스레드 간의 동기화를 이해하고 구현하는 과제에서, mutex를 사용하여 공유 자원에 대한 접근을 동기화하는 방법을 실습할 수 있습니다.

상호 배제(Mutual Exclusion)의 이해: 공유 자원에 대한 동시 접근을 제어하는 상호 배제의 개념을 설명하는 과제에서, mutex의 활용을 통해 상호 배제를 실제로 구현하는 방법을 배울 수 있습니다.

스레드 안전(Thread Safety) 프로그래밍: 스레드 안전한 코드를 작성하는 방법을 배우는 과제에서, 이 코드는 공유 자원(표준 출력)의 스레드 안전한 접근 방법을 제공합니다.

동시성 프로그래밍의 문제 해결: 동시성 프로그래밍에서 발생할 수 있는 문제(예: 레이스 컨디션, 데이터 무결성 문제)를 해결하는 방법을 배우는 과제에서, 이 코드는 mutex를 사용하여 이러한 문제를 해결하는 한 예시를 보여줍니다.

이러한 관점에서, 이 코드는 멀티스레딩, 동기화, 상호 배제, 스레드 안전성 등을 다루는 프로그래밍 과제의 일부로 적합할 수 있습니다.


--------------------------2-1 시작

연결 리스트로 구현한 스택
각 스택 노드는 다음 스택 노드와 자신의 프로세스 리스트를 가리킨다. 
초기상태: 스택 원소는 1개: 빈 리스트를 가진 노드
스택 원소 는 1개: 길이x인 프로세스 리스트를 가진 노드
스택의 노드:2개
enqueue: background process  면 bottom 리스트 끝에 삽입
dequequ: 디스패치 할 때 : stack top리스트의 첫 번째 프로세스
프로세스가 종료된 경우: 그 프로세스를 가리키는 노드 삭제
리스트 노드 삭제 후, 리스트가 비어 있으면 스택에서 해당 노드 제거
** 상위리스트: 현재 리스트 바로 아래 있는 리스트
promote(): 기아현상 막기 위해 enqueque or dequeue를 수행한 수 포인터가 가리키는 리스트의 헤드 노드를 상위 리스트 꼬리에 붙임 - 이동시킨 후 리스트가 비어 있으면 해당 스택 노드를 제거
포인터: 당음에 promote할 수택 노드를 가리키는 포인터 - promote 를 한번 수행할 때마다 1칸 진행, 다음(상위) 스택 노드를 가리킴
clock-wise:bottom->bottom 바로 다음 노드->  ... -> top바로 아래 노드-> bottom ->... -> 
split_n_merge(): enqueue 또는 promote 수행 후, 길어진 리스트 길이가 임계치를 넘어서면 리스트의 앞쪽 절반을 상위 리스트의 꼬리에 붙임
상위 리스트 길이도 threshold를 넘을 경우, 이 작업을 재귀적으로 수행
최상위리스트를 split하게 되면 스택에 새로운 원소(리스트)가 추가됨
